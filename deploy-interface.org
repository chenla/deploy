#   -*- mode: org; fill-column: 60 -*-
#+TITLE: Interfaces
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename

[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-deploy-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/type-work-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Interfaces
:PROPERTIES:
  :CUSTOM_ID: 
  :Name:      /home/deerpig/proj/chenla/deploy/deploy-interface.org
  :Created:   2017-05-19T05:48@Prek Leap (11.642600N-104.919210W)
  :ID:        6da13a89-7693-4aba-b661-da8f47af7454
  :VER:       551631365.425721818
  :GEO:       48P-491193-1287029-15
  :BXID:      proj:XCG2-7141
  :Class:     deploy
  :Type:      work
  :Status:    wip 
  :Licence:   MIT/CC BY-SA 4.0
  :END:

** Introduction
** Device
** Application
** Descriptive & Proscriptive

 - [[https://craigmod.com/sputnik/as_we_may_read/][As we may read]] | Craig Mod
 - [[https://aeon.co/essays/stagnant-and-dull-can-digital-books-ever-replace-print][Stagnant and dull, can digital books ever replace print?]] | Aeon
   Essays

*** Digital Texts

There is a reason that we switched from the scroll to codex.  The
scroll is a terrible interface and it's no different for physical
scrolls or web pages.  We still don't understand that yet.  Scrolls
really do suck at a lot of very basic things that for the codex is
easy.

Do books have branding on every page of the book, other than the
title?  Is the publisher's logo anywhere to be seen except on the
spine and cover page?  Then why subject us to logos on every web page
of a site?  The same goes for author info, links to other services,
like buttons or any crap in a persistent column.

Ebooks keep the clutter down to what it should be.  The iPad
interface, where you can  tap a page to show navigation and where you
are overall in the text is good (needs to be improved but it's good)

The biggest single factor working against ebooks and web pages is that
they are designed to reflow to fit the container that they are in.
Display device makers don't seem to put /any/ thought about how the
size of a screen effects the content shown on it because the web has
separated form factor from content.  This was not always so.

Plain text email is a case in point.  Email messages are written in
plain text with a monospaced font that is typically composed at about
60 characters per line.  This line length worked well in most
terminals and terminal emulators.

Desktop web browsers can be resized to anything the user wants -- so
we get a lot of people who for some reason think it's a good idea to
maximize every window, even if the display is 30" wide and the content
is only a third of that.  Even worse are web sites that will allow
lines to be infinitely long so you get 50 words to a line.  So you
have this perfect storm where the devices are all different sizes, the
windows on those devices are resized indiscriminately and the content
makers each decide what form factor they design for.  These are
unforced errors -- and it results in really crappy interfaces and
reading experiences.  And most important of all, it makes it nearly
impossible to take advantage of the most powerful features that the
codex gives us.

*** WTF Mobile

Mobile devices are a round peg in a square hole -- we are trying to
fit things onto tiny screens that don't and won't and can never fit.
people are being told that you can do everything on your mobile device
-- they are wrong in the worst way possible.

Small form factor displays are excellant for a number of things, they
are good as remote controls, dashboards, alerts, instant messaging,
headline news, short videos etc.

But they are not good for providing anything in depth or requiring
long periods of concentration (unless it's a game).

There are any number of people who claim that they happily read whole
novels on their iPhone, but I don't buy it.  These people are deluding
themselves.  Small screens have a very low LOD.  Semantically, you are
seeing things from very far away at low resolution -- there simply is
not enough space to see all of the information that is there.  There
is also no space for providing any context.

I was once asked to build an ERP system in which everything in the
system could be done on mobile phones as well as on laptop and desktop
machines.  

Watching a movie made for the cinema, or reading something that takes
some effort like Gravity's Rainbow will not just a poor experience,
you will get less out of it than if you read or watched it as
intended.

Having everything instantly available everywhere is not always a good
thing, when everywhere mostly means on a tiny screen with tiny
speakers.  Look up clips from the movie or a quote from GR when you
are trying to settle an argument in a bar.  Use the device to make a
note or annotation of something you are watching on a larger display.
But let's stop trying to fit /everything/ into mobile.  It ill-serves
us, and leaves us impoverished.  Waiting is a good thing when done
right.  Anticipation, preparing for something to come allows us to
frame questions, work out what we are looking for.  And waiting is
/very/ important in communications.  There is a world of difference
between an emotional response and a considered reply.  It takes time
for new information to be integrated into our brains, put into context
and letting our limbic system calm down and get out of the way before
we respond to most things.  Email can be checked from mobile devices
and used to send replies in a pinch -- but it should not be the
primary interface used for reading and writing email.

*** Hypercard

 - [[https://en.wikipedia.org/wiki/Hypercard][HyperCard]] | Wikipedia
 - [[https://arstechnica.com/apple/2012/05/25-years-of-hypercard-the-missing-link-to-the-web/][25 years of HyperCardâ€”the missing link to the Web]] | Ars Technica

The original Mac Hypercard got paging right -- there was no scroll
only pages.  This was largely possible because each screen was
designed to fit in the original Macintoshes tiny display.

*** Plain Text Hypertext

The texinfo hypertext interface (and perhaps gopher, but I can't
remember) got a lot of things right that the web did not.

There is /some/ scrolling but there is definately a page model where
text is broken down into small chunks -- you don't get enormous
scrolls.

*** Paging

The codex is all about pages.  Not pages in the web sense, but
physical pages that can be taken in at a glance.  In scrolls, we have
to mentally buffer what was above the screen and maintain a mental
model of what is below.  A page doesn't tax the brain in this way.
You look at the page as a whole, and perhaps the facing page, and you
can see at a glance the overall structure and context of what you are
looking at.  In most cases the text correponds to any charts or
graphics on the same or facing pages.  In a well designed book the
chapter title is a running header at the top.  There is a page number
indicating what page you are looking at (the total number of pages is
implied by the thickness of the book).  You can see the body of text
and if there are any illustrations.  Footnotes are at the bottom in a
smaller font size and in some cases there might be a running
commentary or notes in a column to one side.

There are no publisher logos or branding on every page (sadly there
are exceptions to this), no icons pointing to other functions or
services.  No copyright notices, or menus or search bars.  No login or
registration links.  And no barrage of popups telling you to turn off
ad blockers, or asking you to sign up for things or to fill out a
survey or any of a hundred other distractions.

Paper magazines and newspapers have traditionally had display
advertising, but when done right they do not jar the eye, or take away
from the reading experience.  Good newspapers will not have advertising
on at least the first and sometimes even the first several pages,
allowing the reader time to get into the text, and load it in their
brains.  It is only the later parts of articles which may have ads in
them but by then they are only a minor distraction if you are
engrossed in the article and if you are loosing interest then the ads
serve to draw the attention of the reader and help pay the bills.

Newspapers are supposed to be laid out so that it is easy to identify
lead stories, and then lead you to follow up stories that provide
additional context and background.  Whole sections of newspapers are
largely devoted to advertising, supermarket specials, classified ads,
auto dealer ads, cinema listings, and ads, sports scores and ads and
ads and ads.

*** Rethinking Digital Paged Media

So now that we've looked at the strengths and weaknesses of print and
digital media, is there a way we can put together a means of producing
both that will work better than what we have now?

The solution has to look at both hardware, interface and content, with
the hardware being physical paper or a display device, interface being
the devices for navigation around the text, be it page numbers, tables
of contents, indexes, search, annotation etc and content is the
layout, typography and design of the words and images on each page.

  - establish canonical device form factors and get device
    manufacturers to stick with them.  These don't have to be exact,
    but there should be the equivalent of a handheld display,
    paperback sized display, hardcover sized display, and large format
    display -- something like A3 that would become the digital
    broadsheet.  You may notice that A4 is not in the list -- I think
    we seriously need to rethink A4 as a default for physical paper.
    We would be better off moving to A5 as a standard form factor for
    pages and then have the option of printing facing pages together
    on A4 paper or on A5,  This would give us a very nice range of
    form factors for different uses.

**** the tyranny of A4 and the ghost of typewriters past

A4 is an artifact of the typewriter, when people needed the space to
copyedit physical pages.  You typed doublespaced, so that there was
room between lines for copyediting.  These were then sent to a
typesetter who set single spaced lines in a smaller form factor which
was more readable.  A4 is not a codex.  When formating texts for A4,
and using single line spacing, and a small font, the lines are too
long and it's easy to loose your place on the page.  Scientific and
technical papers solve this by using two text columns, and this is
marginally better.  But not by much.  And the A4 nightmare has become
the norm in business, legal professions, marketing and education.
Word processors and desktop printing has not made the world a better
place.

**** Fixed references for different form factor

Can we somehow manage to create page references that are tied to pages
but not to screens?

**** Source code is important

 - [[https://en.wikipedia.org/wiki/WordStar][WordStar]] | Wikipedia
 - [[https://en.wikipedia.org/wiki/WordPerfect][WordPerfect]] | Wikipedia
 - [[https://en.wikipedia.org/wiki/LaTeX][LaTeX]] | Wikipedia

In the 1980's, before the macintosh or windows, the two dominate word
processors were WordStar and WordPerfect.  WordPerfect was the
Microsoft Word of the DOS era.  Even many law firms and US government
departments would only accept files in WordPerfect format.  It was
later ported to Windows, and even had a port for the Steve Job's NeXT
computer.
 
WordPerfect started as a plain-text based program that was one of the
most advanced of its time, in 1983 it could do mail merge, footnotes, 
macros, find-and-replace, bold and underline display, and automatic
paragraph reflow.  But to my mind the best feature of all, and one
still missing from any commercial word processor that I am aware of is
that you could switch to a view that showed the source code for the
file.  Word processors tend to add a lot of crud to files that undergo
a lot of editing.  Eventually this crud ends up overwhelming the
ability of the software to render the file properly.  Microsoft Word
is especially notorious for this problem.  But there is no real fix in
Word.  But in WordPerfect you could view source and delete the crud,
which was all clustered at the top of the file and you were good to
go.  It seldom effected much of your formating and reduced the file
size.  This was especially important in the old world of DOS when
computers came with two 5.25" floppy disk drives.  You loaded the
operating system when you started the machine with one floppy, then
removed it and replaced it with the application floppy.  The second
floppy is where you stored your files.

Being able to not only view but edit source files is critically
important, not only to be able to fix things that are broken, but to
recover things when they are so broken they can't be fixed.  You can
optimise source by hand to do fine-grained things that you could never
do using menus or a point and click GUI.

This is why the LaTeX typesetting language and system is so powerful.
LaTeX is still widely used for technical and scientific papers, in
large part because of it's powerful tools for formating mathematical
formulas.  And yet, LaTeX is not a WordProcesser, it is a language
written in plain text that you process to create PDFs (after being
converted to PostScript, or to Texinfo (a hypertext documentation
system for Unix and Unix-like operating systems like Linux) or HTML.

#+begin_comment
There is a point to all of this, but I haven't gotten there yet.  I
think it will eventually lead into Markdown/Orgmode Wiki formats used
as source -- which then render as html or pdfs or something....

This is where I will then go into how we need an alternate Web of
documents which are literate-programing/computing/devops....
#+end_comment



**** Scrolling for composition, Pages for layout

I think we need to start rethinking how we compose text on screens --
at the moment we use a scroll for editing -- though some wysiwyg 
word processors show page breaks (A4) as you type, but this can be
toggled on or off.

Text editors scroll, which somewhat makes sense when writing code --
but is that really true?  What if we had paged-org that made it easy
to compose paged media?

The nice thing about large screens today is that you can get two
descent size windows in a single frame.  With space for margins, and
footnotes etc.  What if you were confined to that page while you
wrote, and then had to do something like M-Return to start a new page?
It would have to be smart to be able move content to new pages as you
added and moved things, but that may not be so bad.  You also will
have to deal with widows and orphans.
** Frightening Search


 - [[http://www.paulgraham.com/ambitious.html][Frighteningly Ambitious Startup Ideas]] | Paul Graham (2017)

perhaps that is the way to go --

the search engine I want is one that searches everything --
not just the web, but books, movies, tech and scientific
papers, images -- and include my stuff -- email, notes todo,
drafts etc.  I want it to work across everything -- in a
terminal, browser, web

I want to know relationships between all of this stuff --
and that will happen only as people participate and
contribute.

I want a history that is useful -- that is integrated into a
meta history of everything I do, not just browse

I want to be able to link and cite anything I find

I want to be able to annotate anything I am looking at

I want to quote anything I am looking at

I want the search engine to be aware of what I am doing, but
not try to give me what it thinks I want based on history --

---

To to this... it won't be a cloud service -- it has to be
distributed, with every user in control of their own data --
perhaps in a container that is always running, listening,
and aggregating.

It means that all users are contributing, actively and
through use to the community -- a bit like delicious
folksonomies so that each person only needs to contribute
here and there, the more people contribute the less that any
one person has to contribute.  we get smarter together

it has to be extensible -- like emacs -- so that anyone can
extend it to scratch any itch they need to itch.  And this
can't be a DSL extension language that talks to the
application via an API -- it has to become part of the code
base like emacs.

-- 

everything is a message, so todo, search items, email,
everything is your email

the interface is like helm and elfeed

I want crud free content

I want to annotate crud free versions of the web

I want literate computing/programing/devops

--- 

I'm not trying to get rich -- I do want to make a living and
make it happen.

All of this is just one part of what I want to build

I don' need much money to do it, but I do need /some/ money.


